import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Kpi = {
  __typename?: 'Kpi';
  description?: Maybe<Scalars['String']>;
  entryObjectClassName: Scalars['String'];
  key: Scalars['String'];
  name: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** update the setting */
  updateSetting?: Maybe<UpdateSettingPayload>;
};


export type MutationUpdateSettingArgs = {
  input: UpdateSettingInput;
};

export type Query = {
  __typename?: 'Query';
  /** Fetch kpi list */
  kpis: Array<Kpi>;
  /** Fetch settings list */
  settings: Array<Setting>;
};

export type Setting = {
  __typename?: 'Setting';
  value: Scalars['Boolean'];
  var: Scalars['String'];
};

/** Autogenerated input type of UpdateSetting */
export type UpdateSettingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Setting value */
  value: Scalars['Boolean'];
  /** Setting item name */
  var: Scalars['String'];
};

/** Autogenerated return type of UpdateSetting */
export type UpdateSettingPayload = {
  __typename?: 'UpdateSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  setting: Setting;
};



export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {

  };
}
export type Sdk = ReturnType<typeof getSdk>;